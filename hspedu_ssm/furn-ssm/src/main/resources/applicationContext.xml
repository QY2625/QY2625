<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--spring的配置文件 : 主要配置和业务逻辑有关的，比如数据源，事务控制等-->
    <!--
        1、扫描com.hspedu.fur包 [包括子包]
        2、context:exclude-filter 配置说明 不扫描控制器
    -->
    <context:component-scan base-package="com.hspedu.furn">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!--引入外部的jdbc.properties文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--配置数据源对象-DataSource Druid数据源-->
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="pooledDataSource">
        <!--给数据源对象配置属性值-->
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
    </bean>

    <!--配置mybatis和spring整合
    1、在项目中引入 mybatis整合到spring的适配库/包
    -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <!--指定mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定数据源-->
        <property name="dataSource" ref="pooledDataSource"/>
        <!--指定mybatis的mapper文件[Mapper.XML]的位置
        1、我们在开发中，通常将mapper.xml放在类路径 resources/mapper
        2、这里指定的value 是 classpath:mapper/*.xml
        -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--配置扫描器，将mybatis接口的实现加入到ioc容器中
    1、mapper接口放在com.hspedu.fur.dao
    2、mybatis就是处于DAO层，操作DB
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--
            1、扫描所有的dao接口的实现，加入到ioc容器中
            2、这里dao接口，就是mapper接口
        -->
        <property name="basePackage" value="com.hspedu.furn.dao"/>
    </bean>

    <!--配置事务管理器-对象
    1、DataSourceTransactionManager 这个对象进行事务管理
    2、一定要配置数据源属性，这样指定该事务管理器 是对哪个数据源进行事务控制
    -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>

    <!--&lt;!&ndash;配置启动基于注解的声明式事务管理功能&ndash;&gt;
    <tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!--
        1、开启基于注解的事务，并指定切入点
        2、execution(* com.hspedu.furn.service..*(..)):
           表示对com.hspedu.furn.service包下的所有类的所有方法进行事务控制
        3、tx:advice:配置事务增强，也就是指定事务如何切入
    -->
    <aop:config>
        <!--切点表达式-->
        <aop:pointcut id="txPoint" expression="execution(* com.hspedu.furn.service..*(..))"/>
        <!--配置事务增强/规则：使用txAdvice 指定规则对 txPoint进行切入-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>
    <!--配置事务增强，也就是指定事务如何切入-->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!--*代表所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--以get开始的所有方法，我们认为是只读，进行调优-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

</beans>