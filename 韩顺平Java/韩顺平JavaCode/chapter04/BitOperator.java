//位运算
public class BitOperator {

	public static void main(String[] args) {
		
		//1.先得到 2 的补码 => 2的原码 00000000 00000000 00000000 00000010
		//	2的补码 00000000 00000000 00000000 00000010
		//2. 3 的补码 3的原码 00000000 00000000 00000000 00000011
		//   3的补码 00000000 00000000 00000000 00000011
		//3. 按位&
		//	00000000 00000000 00000000 00000010
		// 	00000000 00000000 00000000 00000011
		//	00000000 00000000 00000000 00000010 & 运算后的补码
		// 	运算后的原码 也是00000000 00000000 00000000 00000010
		// 结果就是 2
		System.out.println(2&3);//2
		//1. 先得到-2的补码 => -2的原码            100000000 00000000 00000000 00000010
		//2. -2 的反码 =>                        111111111 11111111 11111111 11111101
		//3. -2 的补码 = 反码 + 1(符号位不变)      111111111 11111111 11111111 11111110
		//4. ~-2 操作							000000000 00000000 00000000 00000001
		//5. 运算后的原码 结果就是					000000000 00000000 00000000 00000001
		System.out.println(~-2);//1
		//2的原码=>00000000 00000000 00000000 00000010 ~
		//        11111111 11111111 11111111 11111101
		//减1     11111111  11111111 11111111 11111100
		//取反    10000000 00000000 00000000 00000011  （符号位不变！！！）
		//结果是 -3
		System.out.println(~2);// -3
		//2的原码=>00000000 00000000 00000000 00000010
		//3的原码=>00000000 00000000 00000000 00000011	|
		//2|3     00000000 00000000 00000000 00000011
		//结果是3
		System.out.println(2|3);//3
		//2的原码=>00000000 00000000 00000000 00000010
		//3的原码=>00000000 00000000 00000000 00000011	^
		//2^3     00000000 00000000 00000000 00000001
		//结果是1
		System.out.println(2^3);//1

		             
	}
}